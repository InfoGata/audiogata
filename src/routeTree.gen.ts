/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as SearchImport } from './routes/search'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as PlugininstallImport } from './routes/plugininstall'
import { Route as NowplayingImport } from './routes/nowplaying'
import { Route as LyricsImport } from './routes/lyrics'
import { Route as DonateImport } from './routes/donate'
import { Route as AboutImport } from './routes/about'
import { Route as FavoritesRouteImport } from './routes/favorites/route'
import { Route as IndexImport } from './routes/index'
import { Route as PluginsIndexImport } from './routes/plugins.index'
import { Route as PlaylistsIndexImport } from './routes/playlists.index'
import { Route as TracksTrackIdImport } from './routes/tracks.$trackId'
import { Route as FavoritesTracksImport } from './routes/favorites/tracks'
import { Route as FavoritesPlaylistsImport } from './routes/favorites/playlists'
import { Route as FavoritesArtistsImport } from './routes/favorites/artists'
import { Route as FavoritesAlbumsImport } from './routes/favorites/albums'
import { Route as PluginsPluginIdIndexImport } from './routes/plugins/$pluginId.index'
import { Route as PlaylistsPlaylistIdIndexImport } from './routes/playlists/$playlistId.index'
import { Route as PluginsPluginIdOptionsImport } from './routes/plugins/$pluginId/options'
import { Route as PluginsPluginIdPlaylistsIndexImport } from './routes/plugins/$pluginId/playlists.index'
import { Route as PluginsPluginIdPlaylistsApiIdImport } from './routes/plugins/$pluginId/playlists.$apiId'
import { Route as PluginsPluginIdArtistsApiIdImport } from './routes/plugins/$pluginId/artists.$apiId'
import { Route as PluginsPluginIdAlbumsApiIdImport } from './routes/plugins/$pluginId/albums.$apiId'
import { Route as PlaylistsPlaylistIdTracksTrackIdImport } from './routes/playlists/$playlistId.tracks.$trackId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const PlugininstallRoute = PlugininstallImport.update({
  path: '/plugininstall',
  getParentRoute: () => rootRoute,
} as any)

const NowplayingRoute = NowplayingImport.update({
  path: '/nowplaying',
  getParentRoute: () => rootRoute,
} as any)

const LyricsRoute = LyricsImport.update({
  path: '/lyrics',
  getParentRoute: () => rootRoute,
} as any)

const DonateRoute = DonateImport.update({
  path: '/donate',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const FavoritesRouteRoute = FavoritesRouteImport.update({
  path: '/favorites',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsIndexRoute = PluginsIndexImport.update({
  path: '/plugins/',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistsIndexRoute = PlaylistsIndexImport.update({
  path: '/playlists/',
  getParentRoute: () => rootRoute,
} as any)

const TracksTrackIdRoute = TracksTrackIdImport.update({
  path: '/tracks/$trackId',
  getParentRoute: () => rootRoute,
} as any)

const FavoritesTracksRoute = FavoritesTracksImport.update({
  path: '/tracks',
  getParentRoute: () => FavoritesRouteRoute,
} as any)

const FavoritesPlaylistsRoute = FavoritesPlaylistsImport.update({
  path: '/playlists',
  getParentRoute: () => FavoritesRouteRoute,
} as any)

const FavoritesArtistsRoute = FavoritesArtistsImport.update({
  path: '/artists',
  getParentRoute: () => FavoritesRouteRoute,
} as any)

const FavoritesAlbumsRoute = FavoritesAlbumsImport.update({
  path: '/albums',
  getParentRoute: () => FavoritesRouteRoute,
} as any)

const PluginsPluginIdIndexRoute = PluginsPluginIdIndexImport.update({
  path: '/plugins/$pluginId/',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistsPlaylistIdIndexRoute = PlaylistsPlaylistIdIndexImport.update({
  path: '/playlists/$playlistId/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdOptionsRoute = PluginsPluginIdOptionsImport.update({
  path: '/plugins/$pluginId/options',
  getParentRoute: () => rootRoute,
} as any)

const PluginsPluginIdPlaylistsIndexRoute =
  PluginsPluginIdPlaylistsIndexImport.update({
    path: '/plugins/$pluginId/playlists/',
    getParentRoute: () => rootRoute,
  } as any)

const PluginsPluginIdPlaylistsApiIdRoute =
  PluginsPluginIdPlaylistsApiIdImport.update({
    path: '/plugins/$pluginId/playlists/$apiId',
    getParentRoute: () => rootRoute,
  } as any)

const PluginsPluginIdArtistsApiIdRoute =
  PluginsPluginIdArtistsApiIdImport.update({
    path: '/plugins/$pluginId/artists/$apiId',
    getParentRoute: () => rootRoute,
  } as any)

const PluginsPluginIdAlbumsApiIdRoute = PluginsPluginIdAlbumsApiIdImport.update(
  {
    path: '/plugins/$pluginId/albums/$apiId',
    getParentRoute: () => rootRoute,
  } as any,
)

const PlaylistsPlaylistIdTracksTrackIdRoute =
  PlaylistsPlaylistIdTracksTrackIdImport.update({
    path: '/playlists/$playlistId/tracks/$trackId',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/favorites': {
      preLoaderRoute: typeof FavoritesRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/donate': {
      preLoaderRoute: typeof DonateImport
      parentRoute: typeof rootRoute
    }
    '/lyrics': {
      preLoaderRoute: typeof LyricsImport
      parentRoute: typeof rootRoute
    }
    '/nowplaying': {
      preLoaderRoute: typeof NowplayingImport
      parentRoute: typeof rootRoute
    }
    '/plugininstall': {
      preLoaderRoute: typeof PlugininstallImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/favorites/albums': {
      preLoaderRoute: typeof FavoritesAlbumsImport
      parentRoute: typeof FavoritesRouteImport
    }
    '/favorites/artists': {
      preLoaderRoute: typeof FavoritesArtistsImport
      parentRoute: typeof FavoritesRouteImport
    }
    '/favorites/playlists': {
      preLoaderRoute: typeof FavoritesPlaylistsImport
      parentRoute: typeof FavoritesRouteImport
    }
    '/favorites/tracks': {
      preLoaderRoute: typeof FavoritesTracksImport
      parentRoute: typeof FavoritesRouteImport
    }
    '/tracks/$trackId': {
      preLoaderRoute: typeof TracksTrackIdImport
      parentRoute: typeof rootRoute
    }
    '/playlists/': {
      preLoaderRoute: typeof PlaylistsIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugins/': {
      preLoaderRoute: typeof PluginsIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/options': {
      preLoaderRoute: typeof PluginsPluginIdOptionsImport
      parentRoute: typeof rootRoute
    }
    '/playlists/$playlistId/': {
      preLoaderRoute: typeof PlaylistsPlaylistIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/': {
      preLoaderRoute: typeof PluginsPluginIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/playlists/$playlistId/tracks/$trackId': {
      preLoaderRoute: typeof PlaylistsPlaylistIdTracksTrackIdImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/albums/$apiId': {
      preLoaderRoute: typeof PluginsPluginIdAlbumsApiIdImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/artists/$apiId': {
      preLoaderRoute: typeof PluginsPluginIdArtistsApiIdImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/playlists/$apiId': {
      preLoaderRoute: typeof PluginsPluginIdPlaylistsApiIdImport
      parentRoute: typeof rootRoute
    }
    '/plugins/$pluginId/playlists/': {
      preLoaderRoute: typeof PluginsPluginIdPlaylistsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  FavoritesRouteRoute.addChildren([
    FavoritesAlbumsRoute,
    FavoritesArtistsRoute,
    FavoritesPlaylistsRoute,
    FavoritesTracksRoute,
  ]),
  AboutRoute,
  DonateRoute,
  LyricsRoute,
  NowplayingRoute,
  PlugininstallRoute,
  PrivacyRoute,
  SearchRoute,
  SettingsRoute,
  TracksTrackIdRoute,
  PlaylistsIndexRoute,
  PluginsIndexRoute,
  PluginsPluginIdOptionsRoute,
  PlaylistsPlaylistIdIndexRoute,
  PluginsPluginIdIndexRoute,
  PlaylistsPlaylistIdTracksTrackIdRoute,
  PluginsPluginIdAlbumsApiIdRoute,
  PluginsPluginIdArtistsApiIdRoute,
  PluginsPluginIdPlaylistsApiIdRoute,
  PluginsPluginIdPlaylistsIndexRoute,
])

/* prettier-ignore-end */
